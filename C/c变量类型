注：
相同类型的数据在不同的机器上占用的字符不一定相同，取决于编译器如何分配
int变量类型的大小应是计算机最适合执行的大小
现代的处理器每次处理数据一般至少是4个字节，所以int一般为4个字节

整数变量类型
signed char     1       2**8    简写 char
short int       2       2**16   简写 short
int             4       2**32
long int        4       2**32   简写 long       100L
long long int   8       2**64   简写 long long  100LL
通过在变量类型前使用unsigned关键字，声明无符号整形变量

浮点数
1.6 = 0.16E1
float           4       2.0f
double          8       2.0
long double     16      2.0L

const声明变量值不可便
试图更改const声明的变量值在编译时会报错
const float Pi = 3.1415926f;

极限值
<limits.h>头文件中定义了各种数据类型的极限值
有符号整型
char            CHAR_MIN        CHAR_MAX
short           SHRT_MIN        SHRT_MAX
int             INT_MIN         INT_MAX
long            LONG_MIN        LONG_MAX
long long       LLONG_MIN       LLONG_MAX
无符号整型
下线为0，上线分别为UCHAR_MAX,USHRT_MAX,UINT_MAX,ULONG_MAX,ULLONG_MAX
浮点数
float           FLT_MIN         FLT_MAX
double          DBL_MIN         DBL_MAX
long double     LDBL_MIN        LDBL_MAX

sizeof
确定给定类型占据的字符数，返回size_t类型的整数
size_t类型定义在<stddef.h>头文件中。
size_t size = sizeof(long long);

类型转换
(float)memory

char类型
只占用一个字符，被看作整数类型。
根据编译器的不同，char可带符号位。
char = 'A';
char = 74

宽字符类型
在头文件<stddef.h>中定义了wchar_t类型，该类型的变量存储多个字节字符码，一般占用两个字节，处理Unicode字符时，需要使用该类型。
在char类型的字符常量前面加上修饰符L就可定义一个宽字符常量。
wchar_t w_ch = L'A';
wchar_t类型同样是一个整数
通过%lc输出wchar_t类型

枚举
enum Weekday {Mon, Tue, Wed, Thu, Fri, Sat, Sun} today = Wed, tomorrow = today + 1;
枚举默认从0开始依次增加为每个枚举常量赋值
enum Weekday today = Wed;
同时在定义时声明了a、b两个该类型的变量,并同时初始化了这两个变量
tomorrow = today + 1;
要确定该值的结果是一个有效的枚举值
给定枚举值
enum Weekday {Mon=5, Tue=4, Wed, Thu=10, Fri=3, Sat, Sun};
其中
Wed=5
Sat=4
Sun=5
创建未命名的枚举值
enum {red, orange, yellow, green, blue, indigo, violet} shirt_color;
shirt_color = blue;
必须在定义未命名枚举类型时声明该类型的所有变量。无法在代码的后面定义该类型的其它变量。

布尔类型变量
_Bool valid = 1;
布尔被看作是整数类型
布尔类型是由最近才引入C中,所以选择_Bool,可以最大限度减少与已有代码冲突的可能性.
可通过引入<stdbool.h>来使用bool作为类型名称.
同时该头文件中还定义了true和false,分别对应1和0
bool valid = true;

数学函数
<math.h>头文件中包含了大量的数学函数

数组
数组中的索引值是与第一个元素的偏移量
long numbers[10]; long numbers[5][4];
double values[] = {1, 2, 3, 4, 5};
double valuesi[2][3][3] = { /*第一维的2可以省略不写*/
    {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9},
    },
    {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9},
    }
};

numbers[0]; numbers[i+3];

字符串
char saying[] = "This is a string.";
char sayings[3][22] = {
    "Manners maketh man."
    "Many hands make light work."
    "Too many cooks spoil the broth."
};

  <string.h>
strlen()        # 计算字符串长度
strcpy()        # 复制字符串
strncpy()
strcat()        # 链接字符串
strncat()
strcmp()        # 比较字符串
strncmp()
strchr()        # 查找字符
strstr()        # 查找字符串
  <ctype.h>
toupper()       # 将字符转换大写
tolower()       # 将字符转换小写
  <stdlib.h>
atof()          # 从字符串参数中生成double类型的值
atoi()          # int
atol()          # long
atoll()         # long long

定义宽字符串
wchar_t say[] = "wchar string";
使用%S输出宽字符串

  <wchar.h>声明了操作宽字符串的函数
wcslen()
wcscpy()
wcsncpy()
wcscat()
wcscmp()
wcsncmp()
wcschar()
wcsstr()
fgetws()        # 从stdin等流中都去宽字符串

指针
const long *pvalue = $value;    # 禁止修改指针指向的值，但仍然可以更改指针所指向的地址
long *const pvalue = $value;    # 禁止修改指针指向的地址，但可修改指针指向的值

#分配75*sizeof(int)大小的内存空间
int *pNum = (int *)malloc(75*sizeof(int));

# 分配一个包含75个元素的数组内存，每个元素的大小为int类型的大小，并且初始化所有元素为0
int *pNum = (int *)calloc(75, sizeof(int));

# 释放malloc或calloc分配的内存空间
free(pNum)

# 重新分配malloc、calloc或realloc分配的内存空间
# 若重新分配的内存空间大于之前分配的空间，否则新分配的内存将与以前分配的内存区域大小相同
realloc(pNum, sizeof(int)*10);

分配内存原则
避免分配大量的小块内存。分配堆上的内存有一些系统开销，所以分配许多小的内存块比分配几个大内存块的系统开销大
仅在需要是分配内存。只要使用完堆上的内存块，就释放它
总是取保释放已分配的内存。在编写分配内存的代码时，就要确定在代码的什么地方释放内存
在释放内存之前，确保不会无意中覆盖堆上分配的内存地址，否则程序会出现内存泄露。

指针数组
char *pS[3] = { NULL };     # 包含3个指针的数组

